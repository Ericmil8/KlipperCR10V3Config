[include fluidd.cfg]


[virtual_sdcard]
path: /home/Ericmil8/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[printer]
kinematics: cartesian
max_z_velocity: 14 #5
max_z_accel: 100
max_velocity: 400
max_accel: 1800
max_accel_to_decel: 1800
square_corner_velocity: 1


[input_shaper]
shaper_freq_x: 25.0
shaper_freq_y: 25.0 ;Accelerometer
shaper_type: mzv
damping_ratio_x: 0.1
damping_ratio_y: 0.1

[firmware_retraction]
retract_length: 0.4
retract_speed: 80
unretract_extra_length: .01
unretract_speed: 80


[idle_timeout]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder 
    SET_HEATER_TEMPERATURE HEATER=heater_bed 
    M18
timeout: 1200

[extruder]
step_pin: PA4
dir_pin: !PA6
enable_pin: !PA2
microsteps: 16
full_steps_per_rotation: 200
#rotation_distance: 8
rotation_distance: 7.7201944 
# 16 microsteps * 200 steps/rotation / steps/mm
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB4
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK5
min_temp: 5
max_temp: 275
#max_temp: 255
control: pid
pid_kp = 21.703
pid_ki = 1.104
pid_kd = 106.614
max_extrude_only_distance = 100.00 
pressure_advance = 0.2443

# ASA
#https://www.klipper3d.org/Pressure_Advance.html?h=pressur#tuning-pressure-advance


[stepper_x]
step_pin: PF0 ;step_pin: PF0 #ar54
dir_pin: PF1 ;dir_pin: PF1 #ar55
enable_pin: !PD7  ;enable_pin: !PD7 #!ar38
microsteps: 16
rotation_distance: 39.66941833
endstop_pin: ^PE5
position_endstop: 0
position_max: 309
homing_speed: 80
second_homing_speed: 2.5
position_endstop: -2.1
position_min: -2.1



[stepper_y]
step_pin: PF6
dir_pin: PF7
enable_pin: !PF2
microsteps: 16
rotation_distance: 39.16
endstop_pin: ^PJ1
position_endstop: 0
position_max: 319
homing_speed: 80 ;{200*60}  #define HOMING_FEEDRATE_MM_M { (80*60), (80*60), (10*60) }
second_homing_speed: 2.5
position_endstop: -0.5
position_min: -0.5
#define DEFAULT_MAX_FEEDRATE          { 200, 200, 14, 25 }
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.

[stepper_z]
step_pin: PL3
dir_pin: !PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 7.928
endstop_pin: ^PD3
position_endstop: 0.25
position_min: -1
position_max: 399
homing_speed: 10
second_homing_speed: 2.5
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.



[heater_bed]
heater_pin: PH5
sensor_type: ATC Semitec 104GT-2
#sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK6
min_temp: 5
max_temp: 130
control: pid
pid_kp = 74.976
pid_ki = 1.754
pid_kd = 801.310


[bed_screws]
screw1: 32,35
screw1_name: Front Left
screw2: 271,35
screw2_name: Front Right
screw3: 271,271
screw3_name: Back Right
screw4: 32,271
screw4_name: Back Left
horizontal_move_z: 5
probe_height: 0.20
speed: 75
probe_speed: 5



[duplicate_pin_override]
pins:PK7


[gcode_macro M141]
gcode:
  ;take the paramater S of M141 and store it as CHAMBER_TEMP. If S is not provided, set as 21c.
  {% set CHAMBER_TEMP = params.S|default(21)|float %}
  ;set heater my_chamber_heater equal to M141 S parameter by setting equal to CHAMBER_TEMP.
  SET_PIN  PIN=Heater_Fan VALUE=1.0
  SET_HEATER_TEMPERATURE HEATER=Chamber_Heater TARGET={CHAMBER_TEMP}
  SET_TEMPERATURE_FAN_TARGET temperature_fan=Chamber_Fan target={CHAMBER_TEMP + 10} min_speed=.2 max_speed=.8
  
  
[gcode_macro M900]
gcode:  
    M105
  

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0
    
[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    
    
[gcode_macro Tone1]
gcode:
    M300 S200 P1000   
    M300 S500 P1000
    M300 S1000 P1000
    M300 S1500 P1000
    M300 S400 P2000
    
 
[gcode_arcs]
resolution: 0.1

# An arc will be split into segments. Each segment's length will
# equal the resolution in mm set above. Lower values will produce a
# finer arc, but also more work for your machine. Arcs smaller than
# the configured value will become straight lines. The default is
# 1mm.


[fan]
pin: PH6

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
;restart_method: arduino
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.




#[virtual_sdcard]
#path: ~/.octoprint/uploads/
[virtual_sdcard]
path: /home/Ericmil8/printer_data/gcodes

######################################################################
# 128x64 Full Graphic Creality CR10 / ENDER 3 stockdisplay
######################################################################

# This section is used for a Creality "12864" display with a single
# ribbon cable between the display's EXP3 plug and the
# micro-controller board's EXP1 connector.



# Common EXP1 / EXP2 (display) pins Generic Ramps
[board_pins]
aliases:
    # Common EXP1 header found on many "all-in-one" ramps clones
	#FLIPPED CABLE
	EXP1_1=<5V>,    EXP1_3=PA7,    EXP1_5=PA3,	EXP1_7=PH1,	EXP1_9=PC2,
	EXP1_2=<GND>,	EXP1_4=PA5,	EXP1_6=PA1,	EXP1_8=PH0,	EXP1_10=PC0,
    # EXP2 header
	EXP2_1=<RST>,	EXP2_3=PG0,	EXP2_5=PB2,	EXP2_7=PB0,	EXP2_9=PB1,
	EXP2_2=<GND>,	EXP2_4=PL0,	EXP2_6=PC4,	EXP2_8=PC6,	EXP2_10=PB3
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi"
    # Note, some boards wire: EXP2_8=<RST>, EXP2_10=PG0


######################################################################
# 128x64 Full Graphic Creality CR10 / ENDER 3 stockdisplay
######################################################################

# This section is used for a Creality "12864" display with a single
# ribbon cable between the display's EXP3 plug and the
# micro-controller board's EXP1 connector.

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP2_6, ^EXP2_8
click_pin: ^!EXP1_9

[output_pin beeper]
pin: EXP1_10
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.


# This file contains an example configuration with RPi as secondary mcu

# See docs/Config_Reference.md for a description of parameters.

# The rpi microcontroller is used as secondary.
# Typically, both the X and Y axes
# are connected to the main micro-controller. The rpi microcontroller is used
# on non time-critical functions such as enclosure sensors, additional fan or
# light sources
[mcu Rpi]
serial: /tmp/klipper_host_mcu



;SET_FAN_SPEED FAN=EnclosureFan SPEED=0.5
[temperature_fan  Chamber_Fan]
pin: Rpi:gpio18
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK7

;pin: host:gpio18
;sensor_type: DS18B20
;serial_no: 28-020f92455686 # Each 1-wire device has a unique serial number used to identify the device, # usually in the format 28-host_mcu31674b175ff. This parameter must be provided. # Attached 1-wire devices can be listed using the following Linux command: # ls /sys/bus/w1/devices/ ds18_report_time: 3.0 # Interval in seconds between readings. Default is 3.0, with a minimum of 1.0 sensor_mcu: host_mcu # The micro-controller to read from. Must be the
;sensor_mcu: host

cycle_time:0.01
kick_start_time:0.300
off_below:0.1
gcode_id: F1
control:watermark
#pid_Kp:
#pid_Ki:
#pid_Kd:
#pid_deriv_time:
max_delta:2.0
min_temp:0
max_temp:100
target_temp: 90
max_speed: 1.0
min_speed: 0.3

#[temperature_fan my_temp_fan]
#pin:
#max_power:
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.
#sensor_type:
#sensor_pin:
#control:
#max_delta:
#min_temp:
#max_temp:
#   See the "extruder" section for a description of the above parameters.
#pid_Kp:
#pid_Ki:
#pid_Kd:
#   The proportional (pid_Kp), integral (pid_Ki), and derivative
#   (pid_Kd) settings for the PID feedback control system. Klipper
#   evaluates the PID settings with the following general formula:
#     fan_pwm = max_power - (Kp*e + Ki*integral(e) - Kd*derivative(e)) / 255
#   Where "e" is "target_temperature - measured_temperature" and
#   "fan_pwm" is the requested fan rate with 0.0 being full off and
#   1.0 being full on. The pid_Kp, pid_Ki, and pid_Kd parameters must
#   be provided when the PID control algorithm is enabled.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed when using the PID control algorithm. This may reduce
#   the impact of measurement noise. The default is 2 seconds.
#target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.


;[temperature_sensor Chamber_Temp]
;sensor_type: DS18B20
;serial_no: 28-020f92455686 # Each 1-wire device has a unique serial number used to identify the device, # usually in the format 28-host_mcu31674b175ff. This parameter must be provided. # Attached 1-wire devices can be listed using the following Linux command: # ls /sys/bus/w1/devices/ ds18_report_time: 3.0 # Interval in seconds between readings. Default is 3.0, with a minimum of 1.0 sensor_mcu: host_mcu # The micro-controller to read from. Must be the
;sensor_mcu: Rpi
;gcode_id: A


;[fan_generic Heater_Fan ]
;pin: Rpi:gpio19
;max_power:1
;shutdown_speed:0
;off_below:0.99
[output_pin Heater_Fan]
pin: ! Rpi:gpio19
value:0
shutdown_value:0



[heater_generic Chamber_Heater]
heater_pin: Rpi:gpio21
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PK7
max_power: 1.0
min_temp:0
max_temp:80
control: pid

pid_Kp=71.121 
pid_Ki=1.148
pid_Kd=1101.484


gcode_id: C

[verify_heater Chamber_Heater]
max_error: 480
check_gain_time: 600
hysteresis: 5
heating_gain: 1

[adxl345]
cs_pin: Rpi:None
;cs_pin: Rpi:gpio8

[resonance_tester]
accel_chip: adxl345


probe_points:
    150, 150, 20  # an example

[output_pin Relay3]
pin: ! Rpi:gpio16
value:0
shutdown_value:0


[output_pin Relay3]
pin: ! Rpi:gpio16
value:0
shutdown_value:0


[output_pin Relay4]
pin: ! Rpi:gpio20
value:0
shutdown_value:0

# Example1: A led strip controlled by the GPIO20 on the RPi
[output_pin caselight]
pin:! Rpi:gpio26
value:1
shutdown_value:1

[output_pin PowerOn]
pin: Rpi:gpio6
#pwm: False
value:1
shutdown_value:1
#maximum_mcu_duration:
#cycle_time: 0.100
#hardware_pwm: False

[gcode_macro TOGGLE_CASELIGHT]

gcode:
  SET_PIN PIN=caselight VALUE={(not printer['output_pin caselight'].value)|int}


[pause_resume]
recover_velocity: 50

[filament_switch_sensor fil_runout_sensor]
pause_on_runout: True
switch_pin: PE4 #ar2


;[filament_motion_sensor my_sensor]
;detection_length: 7.0
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
;extruder:
#   The name of the extruder section this sensor is associated with.
#   This parameter must be provided.
;switch_pin:
#pause_on_runout:
#runout_gcode:
#insert_gcode:
#event_delay:
#pause_delay:
#   See the "filament_switch_sensor" section for a description of the
#   above parameters.


# Example2: Using the i2c bus of the RPi to read a sensor
[temperature_sensor enclosure_temp2]
sensor_type: DS18B20
serial_no: 28-020f92455686
ds18_report_time:2.0
sensor_mcu:Rpi

[gcode_macro QUERY_ENCLOSURE]
gcode:
    {% set sensor = printer["DS18B20 enclosure_temp2"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.humidity))}

# Example 3:Using a pin on another gpiochip connected to the RPi
# (in this case on an MCP23017)
#[fan]
#pin: host:gpiochip2/gpio7



# This file contains an example configuration to use a PWM-controlled tool
# such as a laser or spindle.
# See docs/Using_PWM_Tools.md for a more detailed description.

#[pwm_tool TOOL]
#pin: !ar9       # use your fan's pin number
#hardware_pwm: True
#cycle_time: 0.001
#shutdown_value: 0
#maximum_mcu_duration: 5
        # Default: 0 (disabled)
        # Amount of time in which the host has to acknowledge
        # a non-shutdown output value.
        # Suggested value is around 5 seconds.
        # Use a value that does not burn up your stock.
        # Please note that during homing, your tool
        # needs to be in default speed.

#[gcode_macro M3]
#gcode:
#    {% set S = params.S|default(0.0)|float %}
#    SET_PIN PIN=TOOL VALUE={S / 255.0}

#[gcode_macro M4]
#gcode:
#    {% set S = params.S|default(0.0)|float %}
#    SET_PIN PIN=TOOL VALUE={S / 255.0}

#[gcode_macro M5]
#gcode:
#    SET_PIN PIN=TOOL VALUE=0


# Optional: LCD Menu Control

#[menu __main __control __toolonoff]
#type: input
#enable: {'pwm_tool TOOL' in printer}
#name: Fan: {'ON ' if menu.input else 'OFF'}
#input: {printer['pwm_tool TOOL'].value}
#input_min: 0
#input_max: 1
#input_step: 1
#gcode:
#    M3 S{255 if menu.input else 0}

#[menu __main __control __toolspeed]
#type: input
#enable: {'pwm_tool TOOL' in printer}
#name: Tool speed: {'%3d' % (menu.input*100)}%
#input: {printer['pwm_tool TOOL'].value}
#input_min: 0
#input_max: 1
#input_step: 0.01
#gcode:
#    M3 S{'%d' % (menu.input*255)}




# Example1: A led strip controlled by the GPIO20 on the RPi
;[output_pin caselight]
;pin: host:gpio20
# You can also write the pin in extended form by specifying
# the reference gpiochip.
#pin: host:gpiochip0/gpio20

;[gcode_macro TOGGLE_CASELIGHT]
;gcode:
;  SET_PIN PIN=caselight VALUE={(not printer['output_pin caselight'].value)|int}


# Example2: Using the i2c bus of the RPi to read a sensor
#[temperature_sensor enclosure_temp]
#sensor_type: HTU21D
#i2c_mcu: host
#i2c_bus: i2c.1
#htu21d_hold_master: False

#[gcode_macro QUERY_ENCLOSURE]
#gcode:
#    {% set sensor = printer["htu21d enclosure_temp"] %}
#    {action_respond_info(
#        "Temperature: %.2f C\n"
#        "Humidity: %.2f%%" % (
#            sensor.temperature,
#            sensor.humidity))}

# Example 3:Using a pin on another gpiochip connected to the RPi
# (in this case on an MCP23017)
#[fan]
#pin: host:gpiochip2/gpio7




#Uncomment the following lines if you have a BL-Touch
#[bltouch]
#sensor_pin: ^PD2 #^ar19
#control_pin: PB5 #ar11
#set_output_mode: 5V
#pin_move_time: 0.4
#stow_on_each_sample: False
#probe_with_touch_mode: False
#x_offset: 45.75
#y_offset: -3.40
#z_offset:  3.28
#samples: 2
#sample_retract_dist: 2
#samples_result: average

#Uncomment the following lines if you have a BL-Touch
#[bed_mesh]
#speed: 50
#horizontal_move_z: 6
#mesh_min: 46.50,0.75
#mesh_max: 253.5,295.85
#probe_count: 7,7
#algorithm: bicubic

#Uncomment the following lines if you have a BL-Touch
#[screws_tilt_adjust]
#screw1: 0,29
#screw1_name: front left screw
#screw2: 228,29
#screw2_name: front right screw
#screw3: 228,269
#screw3_name: rear right screw
#screw4: 0,269
#screw4_name: rear left screw
#speed: 50
#horizontal_move_z: 10
#screw_thread: CW-M3






























# Common parameters available for all menu config sections.
#[menu __some_list __some_name]
#type: disabled
#   Permanently disabled menu element, only required attribute is 'type'.
#   Allows you to easily disable/hide existing menu items.

#[menu some_name]
#type:
#   One of command, input, list, text:
#       command - basic menu element with various script triggers
#       input   - same like 'command' but has value changing capabilities.
#                 Press will start/stop edit mode.
#       list    - it allows for menu items to be grouped together in a
#                 scrollable list.  Add to the list by creating menu
#                 configurations using "some_list" as a prefix - for
#                 example: [menu some_list some_item_in_the_list]
#       vsdlist - same as 'list' but will append files from virtual sdcard
#                 (will be removed in the future)
#name:
#   Name of menu item - evaluated as a template.
#enable:
#   Template that evaluates to True or False.
#index:
#   Position where an item needs to be inserted in list. By default
#   the item is added at the end.

#[menu some_list]
#type: list
#name:
#enable:
#   See above for a description of these parameters.

#[menu some_list some_command]
#type: command
#name:
#enable:
#   See above for a description of these parameters.
#gcode:
#   Script to run on button click or long click. Evaluated as a
#   template.

#[menu some_list some_input]
#type: input
#name:
#enable:
#   See above for a description of these parameters.
#input:
#   Initial value to use when editing - evaluated as a template.
#   Result must be float.
#input_min:
#   Minimum value of range - evaluated as a template. Default -99999.
#input_max:
#   Maximum value of range - evaluated as a template. Default 99999.
#input_step:
#   Editing step - Must be a positive integer or float value. It has
#   internal fast rate step. When "(input_max - input_min) /
#   input_step > 100" then fast rate step is 10 * input_step else fast
#   rate step is same input_step.
#realtime:
#   This attribute accepts static boolean value. When enabled then
#   gcode script is run after each value change. The default is False.
#gcode:
#   Script to run on button click, long click or value change.
#   Evaluated as a template. The button click will trigger the edit
#   mode start or end.







# This file defines the default layout of the printer's menu.

# It is not necessary to edit this file to change the menu. Instead,
# one may override any of the sections defined here by defining a
# section with the same name in the main printer.cfg config file.

### DEFAULT MENU ###
# Main
#   + Tune
#       + Speed: 000%
#       + Flow: 000%
#       + Offset Z:00.00
#   + OctoPrint
#       + Pause printing
#       + Resume printing
#       + Abort printing
#   + SD Card
#       + Start printing
#       + Resume printing
#       + Pause printing
#       + Cancel printing
#       + ... (files)
#   + Control
#       + Home All
#       + Home Z
#       + Home X/Y
#       + Steppers off
#       + Fan: OFF
#       + Fan speed: 000%
#       + Lights: OFF
#       + Lights: 000%
#       + Move 10mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 0.1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#   + Temperature
#       + Ex0:000 (0000)
#       + Ex1:000 (0000)
#       + Bed:000 (0000)
#       + Preheat PLA
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Preheat ABS
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Cooldown
#           + Cooldown all
#           + Cooldown hotend
#           + Cooldown hotbed
#   + Filament
#       + Ex0:000 (0000)
#       + Load Fil. fast
#       + Load Fil. slow
#       + Unload Fil.fast
#       + Unload Fil.slow
#       + Feed: 000.0
#   + Setup
#       + Save config
#       + Restart
#           + Restart host
#           + Restart FW
#       + PID tuning
#           + Tune Hotend PID
#           + Tune Hotbed PID
#       + Calibration
#           + Delta cal. auto
#           + Delta cal. man
#               + Start probing
#               + Move Z: 000.00
#               + Test Z: ++
#               + Accept
#               + Abort
#           + Bed probe
#       + Dump parameters

### menu main ###
[menu __main]
type: list
name: Main

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.idle_timeout.state == "Printing"}
name: Tune

[menu __main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1


### menu octoprint ###
[menu __main __octoprint]
type: list
name: OctoPrint

[menu __main __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    {action_respond_info('action:pause')}

[menu __main __octoprint __resume]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Resume printing
gcode:
    {action_respond_info('action:resume')}

[menu __main __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Abort printing
gcode:
    {action_respond_info('action:cancel')}

### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: SD Card

[menu __main __sdcard __start]
type: command
enable: {('virtual_sdcard' in printer) and printer.virtual_sdcard.file_path and not printer.virtual_sdcard.is_active}
name: Start printing
gcode: M24

[menu __main __sdcard __resume]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    {% if "pause_resume" in printer %}
        RESUME
    {% else %}
        M24
    {% endif %}

[menu __main __sdcard __pause]
type: command
enable: {('virtual_sdcard' in printer) and printer.print_stats.state == "printing"}
name: Pause printing
gcode:
    {% if "pause_resume" in printer %}
        PAUSE
    {% else %}
        M25
    {% endif %}

[menu __main __sdcard __cancel]
type: command
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Cancel printing
gcode:
    {% if 'pause_resume' in printer %}
        CANCEL_PRINT
    {% else %}
        M25
        M27
        M26 S0
        TURN_OFF_HEATERS
        {% if printer.toolhead.position.z <= printer.toolhead.axis_maximum.z - 5 %}
            G91
            G0 Z5 F1000
            G90
        {% endif %}
    {% endif %}

### menu control ###
[menu __main __control]
type: list
name: Control

[menu __main __control __home]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home All
gcode: G28

[menu __main __control __homez]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __main __control __homexy]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __main __control __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

[menu __main __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'%3d' % (menu.input*100)}%
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode:
    SET_PIN PIN=caselight VALUE={menu.input}

### menu move 10mm ###
[menu __main __control __move_10mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 10mm

[menu __main __control __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __main __temp]
type: list
name: Temperature

[menu __main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __temp __hotend1_target]
type: input
enable: {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __temp __preheat_pla]
type: list
name: Preheat PLA

[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S200

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S200

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S245

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S110

[menu __main __temp __cooldown]
type: list
name: Cooldown

[menu __main __temp __cooldown __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __main __temp __cooldown __hotend]
type: command
enable: {'extruder' in printer}
name: Cooldown hotend
gcode: M104 S0

[menu __main __temp __cooldown __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###

[menu __main __filament]
type: list
name: Filament

[menu __main __filament __hotend0_target]
type: input
enable: {'extruder' in printer}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __loadf]
type: command
name: Load Fil. fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type: command
name: Load Fil. slow
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type: command
name: Unload Fil.fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type: command
name: Unload Fil.slow
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type: input
name: Feed: {'%.1f' % menu.input}
input: 5
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F60
    RESTORE_GCODE_STATE NAME=__filament__load

### menu setup ###
[menu __main __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __main __setup __save_config]
type: command
name: Save config
gcode: SAVE_CONFIG

[menu __main __setup __restart]
type: list
name: Restart

[menu __main __setup __restart __host_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart host
gcode: RESTART

[menu __main __setup __restart __firmware_restart]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __main __setup __tuning]
type: list
name: PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('extruder' in printer)}
name: Tune Hotend PID
gcode: PID_CALIBRATE HEATER=extruder TARGET=210 WRITE_FILE=1

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {(not printer.idle_timeout.state == "Printing") and ('heater_bed' in printer)}
name: Tune Hotbed PID
gcode: PID_CALIBRATE HEATER=heater_bed TARGET=60 WRITE_FILE=1

[menu __main __setup __calib]
type: list
name: Calibration









[menu __main __setup __calib __adjust_bed_screw]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Tram Bed
index:0

[menu __main __setup __calib __adjust_bed_screw _start_tramABS]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Start ABS
gcode:
    G28
    G0 F1500  
    ;G0 X150 Y150 Z100.0 F3000 ;Move Z Axis up
    M104 S200
    M140 S100
    BED_SCREWS_ADJUST

    
[menu __main __setup __calib __adjust_bed_screw _start_tramPLA]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Start PLA
gcode:
    G28
    G0 F1500  
    ;G0 X150 Y150 Z100.0 F3000 ;Move Z Axis up
    M104 S180
    M140 S60
    BED_SCREWS_ADJUST
    
[menu __main __setup __calib __adjust_bed_screw _adjusted_tram]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Next
gcode:
    ADJUSTED
    
[menu __main __setup __calib __adjust_bed_screw _accept_tram]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Accept Next
gcode:
    ACCEPT
    
[menu __main __setup __calib __adjust_bed_screw _abort_tram]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Cancel
gcode:
    ABORT
    
[menu __main __setup __calib __adjust_bed_screw __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu ___main __setup __calib __adjust_bed_screw __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

[menu __main __setup __calib __delta_calib_auto]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Delta cal. auto
gcode:
    G28
    DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Delta cal. man

[menu __main __setup __calib __bedprobe]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Bed probe
gcode: PROBE

[menu __main __setup __calib __delta_calib_man __start]
type: command
name: Start probing
gcode:
    G28
    DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type: command
name: Abort
gcode: ABORT

[menu __main __setup __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}






[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/Ericmil8/klipper-backup/script.sh
timeout: 90.0
verbose: True

